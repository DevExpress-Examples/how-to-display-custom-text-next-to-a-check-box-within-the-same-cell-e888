'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
	Imports System
Namespace WindowsApplication6


	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(True), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), System.Xml.Serialization.XmlRootAttribute("DepartmentsDataSet"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Partial Public Class DepartmentsDataSet
		Inherits System.Data.DataSet

		Private tableDepartments As DepartmentsDataTable

		Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New System.Data.DataSet()
				ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
				If (ds.Tables("Departments") IsNot Nothing) Then
					MyBase.Tables.Add(New DepartmentsDataTable(ds.Tables("Departments")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False), System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Departments() As DepartmentsDataTable
			Get
				Return Me.tableDepartments
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.BrowsableAttribute(True), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As System.Data.DataSet
			Dim cln As DepartmentsDataSet = (CType(MyBase.Clone(), DepartmentsDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Departments") IsNot Nothing) Then
					MyBase.Tables.Add(New DepartmentsDataTable(ds.Tables("Departments")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
			Dim stream As New System.IO.MemoryStream()
			Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableDepartments = (CType(MyBase.Tables("Departments"), DepartmentsDataTable))
			If (initTable = True) Then
				If (Me.tableDepartments IsNot Nothing) Then
					Me.tableDepartments.InitVars()
				End If
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "DepartmentsDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/DepartmentsDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableDepartments = New DepartmentsDataTable()
			MyBase.Tables.Add(Me.tableDepartments)
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeDepartments() As Boolean
			Return False
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New DepartmentsDataSet()
			Dim type As New System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
			xs.Add(ds.GetSchemaSerializable())
			Dim any As New System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Return type
		End Function

		Public Delegate Sub DepartmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As DepartmentsRowChangeEvent)

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class DepartmentsDataTable
			Inherits System.Data.DataTable
			Implements System.Collections.IEnumerable

			Private columnID As System.Data.DataColumn

			Private columnPARENTID As System.Data.DataColumn

			Private columnIMAGEINDEX As System.Data.DataColumn

			Private columnDEPARTMENT As System.Data.DataColumn

			Private columnBUDGET As System.Data.DataColumn

			Private columnLOCATION As System.Data.DataColumn

			Private columnPHONE1 As System.Data.DataColumn

			Private columnPHONE2 As System.Data.DataColumn

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Departments"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property IDColumn() As System.Data.DataColumn
				Get
					Return Me.columnID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PARENTIDColumn() As System.Data.DataColumn
				Get
					Return Me.columnPARENTID
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property IMAGEINDEXColumn() As System.Data.DataColumn
				Get
					Return Me.columnIMAGEINDEX
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property DEPARTMENTColumn() As System.Data.DataColumn
				Get
					Return Me.columnDEPARTMENT
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property BUDGETColumn() As System.Data.DataColumn
				Get
					Return Me.columnBUDGET
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property LOCATIONColumn() As System.Data.DataColumn
				Get
					Return Me.columnLOCATION
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PHONE1Column() As System.Data.DataColumn
				Get
					Return Me.columnPHONE1
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PHONE2Column() As System.Data.DataColumn
				Get
					Return Me.columnPHONE2
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As DepartmentsRow
				Get
					Return (CType(Me.Rows(index), DepartmentsRow))
				End Get
			End Property

			Public Event DepartmentsRowChanging As DepartmentsRowChangeEventHandler

			Public Event DepartmentsRowChanged As DepartmentsRowChangeEventHandler

			Public Event DepartmentsRowDeleting As DepartmentsRowChangeEventHandler

			Public Event DepartmentsRowDeleted As DepartmentsRowChangeEventHandler

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddDepartmentsRow(ByVal row As DepartmentsRow)
				Me.Rows.Add(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddDepartmentsRow(ByVal ID As Double, ByVal PARENTID As Double, ByVal IMAGEINDEX As Double, ByVal DEPARTMENT As String, ByVal BUDGET As Decimal, ByVal LOCATION As String, ByVal PHONE1 As String, ByVal PHONE2 As String) As DepartmentsRow
				Dim rowDepartmentsRow As DepartmentsRow = (CType(Me.NewRow(), DepartmentsRow))
				rowDepartmentsRow.ItemArray = New Object() { ID, PARENTID, IMAGEINDEX, DEPARTMENT, BUDGET, LOCATION, PHONE1, PHONE2}
				Me.Rows.Add(rowDepartmentsRow)
				Return rowDepartmentsRow
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindByID(ByVal ID As Double) As DepartmentsRow
				Return (CType(Me.Rows.Find(New Object() { ID}), DepartmentsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
				Return Me.Rows.GetEnumerator()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As System.Data.DataTable
				Dim cln As DepartmentsDataTable = (CType(MyBase.Clone(), DepartmentsDataTable))
				cln.InitVars()
				Return cln
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As System.Data.DataTable
				Return New DepartmentsDataTable()
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnID = MyBase.Columns("ID")
				Me.columnPARENTID = MyBase.Columns("PARENTID")
				Me.columnIMAGEINDEX = MyBase.Columns("IMAGEINDEX")
				Me.columnDEPARTMENT = MyBase.Columns("DEPARTMENT")
				Me.columnBUDGET = MyBase.Columns("BUDGET")
				Me.columnLOCATION = MyBase.Columns("LOCATION")
				Me.columnPHONE1 = MyBase.Columns("PHONE1")
				Me.columnPHONE2 = MyBase.Columns("PHONE2")
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnID = New System.Data.DataColumn("ID", GetType(Double), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnID)
				Me.columnPARENTID = New System.Data.DataColumn("PARENTID", GetType(Double), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPARENTID)
				Me.columnIMAGEINDEX = New System.Data.DataColumn("IMAGEINDEX", GetType(Double), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnIMAGEINDEX)
				Me.columnDEPARTMENT = New System.Data.DataColumn("DEPARTMENT", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnDEPARTMENT)
				Me.columnBUDGET = New System.Data.DataColumn("BUDGET", GetType(Decimal), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBUDGET)
				Me.columnLOCATION = New System.Data.DataColumn("LOCATION", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLOCATION)
				Me.columnPHONE1 = New System.Data.DataColumn("PHONE1", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPHONE1)
				Me.columnPHONE2 = New System.Data.DataColumn("PHONE2", GetType(String), Nothing, System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPHONE2)
				Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() { Me.columnID}, True))
				Me.columnID.AllowDBNull = False
				Me.columnID.Unique = True
				Me.columnDEPARTMENT.MaxLength = 100
				Me.columnLOCATION.MaxLength = 50
				Me.columnPHONE1.MaxLength = 15
				Me.columnPHONE2.MaxLength = 15
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewDepartmentsRow() As DepartmentsRow
				Return (CType(Me.NewRow(), DepartmentsRow))
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
				Return New DepartmentsRow(builder)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As System.Type
				Return GetType(DepartmentsRow)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.DepartmentsRowChangedEvent IsNot Nothing) Then
					RaiseEvent DepartmentsRowChanged(Me, New DepartmentsRowChangeEvent((CType(e.Row, DepartmentsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.DepartmentsRowChangingEvent IsNot Nothing) Then
					RaiseEvent DepartmentsRowChanging(Me, New DepartmentsRowChangeEvent((CType(e.Row, DepartmentsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.DepartmentsRowDeletedEvent IsNot Nothing) Then
					RaiseEvent DepartmentsRowDeleted(Me, New DepartmentsRowChangeEvent((CType(e.Row, DepartmentsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.DepartmentsRowDeletingEvent IsNot Nothing) Then
					RaiseEvent DepartmentsRowDeleting(Me, New DepartmentsRowChangeEvent((CType(e.Row, DepartmentsRow)), e.Action))
				End If
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveDepartmentsRow(ByVal row As DepartmentsRow)
				Me.Rows.Remove(row)
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
				Dim type As New System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New DepartmentsDataSet()
				xs.Add(ds.GetSchemaSerializable())
				Dim any1 As New System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "DepartmentsDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Return type
			End Function
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Partial Public Class DepartmentsRow
			Inherits System.Data.DataRow

			Private tableDepartments As DepartmentsDataTable

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableDepartments = (CType(Me.Table, DepartmentsDataTable))
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property ID() As Double
				Get
					Return (CDbl(Me(Me.tableDepartments.IDColumn)))
				End Get
				Set(ByVal value As Double)
					Me(Me.tableDepartments.IDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PARENTID() As Double
				Get
					Try
						Return (CDbl(Me(Me.tableDepartments.PARENTIDColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'PARENTID' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Double)
					Me(Me.tableDepartments.PARENTIDColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property IMAGEINDEX() As Double
				Get
					Try
						Return (CDbl(Me(Me.tableDepartments.IMAGEINDEXColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'IMAGEINDEX' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Double)
					Me(Me.tableDepartments.IMAGEINDEXColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property DEPARTMENT() As String
				Get
					Try
						Return (CStr(Me(Me.tableDepartments.DEPARTMENTColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'DEPARTMENT' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableDepartments.DEPARTMENTColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property BUDGET() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableDepartments.BUDGETColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'BUDGET' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableDepartments.BUDGETColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property LOCATION() As String
				Get
					Try
						Return (CStr(Me(Me.tableDepartments.LOCATIONColumn)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'LOCATION' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableDepartments.LOCATIONColumn) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PHONE1() As String
				Get
					Try
						Return (CStr(Me(Me.tableDepartments.PHONE1Column)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'PHONE1' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableDepartments.PHONE1Column) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property PHONE2() As String
				Get
					Try
						Return (CStr(Me(Me.tableDepartments.PHONE2Column)))
					Catch e As System.InvalidCastException
						Throw New System.Data.StrongTypingException("The value for column 'PHONE2' in table 'Departments' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableDepartments.PHONE2Column) = value
				End Set
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPARENTIDNull() As Boolean
				Return Me.IsNull(Me.tableDepartments.PARENTIDColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPARENTIDNull()
				Me(Me.tableDepartments.PARENTIDColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsIMAGEINDEXNull() As Boolean
				Return Me.IsNull(Me.tableDepartments.IMAGEINDEXColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetIMAGEINDEXNull()
				Me(Me.tableDepartments.IMAGEINDEXColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsDEPARTMENTNull() As Boolean
				Return Me.IsNull(Me.tableDepartments.DEPARTMENTColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetDEPARTMENTNull()
				Me(Me.tableDepartments.DEPARTMENTColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsBUDGETNull() As Boolean
				Return Me.IsNull(Me.tableDepartments.BUDGETColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetBUDGETNull()
				Me(Me.tableDepartments.BUDGETColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsLOCATIONNull() As Boolean
				Return Me.IsNull(Me.tableDepartments.LOCATIONColumn)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetLOCATIONNull()
				Me(Me.tableDepartments.LOCATIONColumn) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPHONE1Null() As Boolean
				Return Me.IsNull(Me.tableDepartments.PHONE1Column)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPHONE1Null()
				Me(Me.tableDepartments.PHONE1Column) = System.Convert.DBNull
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPHONE2Null() As Boolean
				Return Me.IsNull(Me.tableDepartments.PHONE2Column)
			End Function

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPHONE2Null()
				Me(Me.tableDepartments.PHONE2Column) = System.Convert.DBNull
			End Sub
		End Class

		<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class DepartmentsRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As DepartmentsRow

			Private eventAction As System.Data.DataRowAction

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As DepartmentsRow, ByVal action As System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As DepartmentsRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace WindowsApplication6.DepartmentsDataSetTableAdapters


	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(True), System.ComponentModel.DataObjectAttribute(True), System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Partial Public Class DepartmentsTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As System.Data.OleDb.OleDbDataAdapter

		Private _connection As System.Data.OleDb.OleDbConnection

		Private _commandCollection() As System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Connection() As System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitAdapter()
			Me._adapter = New System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Departments"
			tableMapping.ColumnMappings.Add("ID", "ID")
			tableMapping.ColumnMappings.Add("PARENTID", "PARENTID")
			tableMapping.ColumnMappings.Add("IMAGEINDEX", "IMAGEINDEX")
			tableMapping.ColumnMappings.Add("DEPARTMENT", "DEPARTMENT")
			tableMapping.ColumnMappings.Add("BUDGET", "BUDGET")
			tableMapping.ColumnMappings.Add("LOCATION", "LOCATION")
			tableMapping.ColumnMappings.Add("PHONE1", "PHONE1")
			tableMapping.ColumnMappings.Add("PHONE2", "PHONE2")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Departments` WHERE ((`ID` = ?) AND ((? = 1 AND `PARENTID` IS NULL) OR (`PARENTID` = ?)) AND ((? = 1 AND `IMAGEINDEX` IS NULL) OR (`IMAGEINDEX` = ?)) AND ((? = 1 AND `DEPARTMENT` IS NULL) OR (`DEPARTMENT` = ?)) AND ((? = 1 AND `BUDGET` IS NULL) OR (`BUDGET` = ?)) AND ((? = 1 AND `LOCATION` IS NULL) OR (`LOCATION` = ?)) AND ((? = 1 AND `PHONE1` IS NULL) OR (`PHONE1` = ?)) AND ((? = 1 AND `PHONE2` IS NULL) OR (`PHONE2` = ?)))"
			Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PARENTID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PARENTID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_IMAGEINDEX", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_IMAGEINDEX", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DEPARTMENT", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DEPARTMENT", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BUDGET", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BUDGET", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCATION", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCATION", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PHONE1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PHONE1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PHONE2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PHONE2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Departments` (`ID`, `PARENTID`, `IMAGEINDEX`, `DEPARTMENT`, `BUDGET`" & ", `LOCATION`, `PHONE1`, `PHONE2`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PARENTID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IMAGEINDEX", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DEPARTMENT", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BUDGET", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCATION", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PHONE1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PHONE2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Departments` SET `ID` = ?, `PARENTID` = ?, `IMAGEINDEX` = ?, `DEPARTMENT` = ?, `BUDGET` = ?, `LOCATION` = ?, `PHONE1` = ?, `PHONE2` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `PARENTID` IS NULL) OR (`PARENTID` = ?)) AND ((? = 1 AND `IMAGEINDEX` IS NULL) OR (`IMAGEINDEX` = ?)) AND ((? = 1 AND `DEPARTMENT` IS NULL) OR (`DEPARTMENT` = ?)) AND ((? = 1 AND `BUDGET` IS NULL) OR (`BUDGET` = ?)) AND ((? = 1 AND `LOCATION` IS NULL) OR (`LOCATION` = ?)) AND ((? = 1 AND `PHONE1` IS NULL) OR (`PHONE1` = ?)) AND ((? = 1 AND `PHONE2` IS NULL) OR (`PHONE2` = ?)))"
			Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("ID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PARENTID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IMAGEINDEX", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DEPARTMENT", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("BUDGET", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCATION", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PHONE1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PHONE2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_ID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "ID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PARENTID", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PARENTID", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PARENTID", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_IMAGEINDEX", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_IMAGEINDEX", System.Data.OleDb.OleDbType.Double, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "IMAGEINDEX", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DEPARTMENT", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DEPARTMENT", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "DEPARTMENT", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_BUDGET", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_BUDGET", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BUDGET", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCATION", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCATION", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "LOCATION", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PHONE1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PHONE1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE1", System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PHONE2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PHONE2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "PHONE2", System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitConnection()
			Me._connection = New System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.DepartmentsConnectionString
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT ID, PARENTID, IMAGEINDEX, DEPARTMENT, BUDGET, LOCATION, PHONE1, PHONE2 FRO" & "M Departments"
			Me._commandCollection(0).CommandType = System.Data.CommandType.Text
		End Sub

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As DepartmentsDataSet.DepartmentsDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As DepartmentsDataSet.DepartmentsDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New DepartmentsDataSet.DepartmentsDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As DepartmentsDataSet.DepartmentsDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As DepartmentsDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Departments")
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New System.Data.DataRow() { dataRow})
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_ID As System.Nullable(Of Double), ByVal Original_PARENTID As System.Nullable(Of Double), ByVal Original_IMAGEINDEX As System.Nullable(Of Double), ByVal Original_DEPARTMENT As String, ByVal Original_BUDGET As System.Nullable(Of Decimal), ByVal Original_LOCATION As String, ByVal Original_PHONE1 As String, ByVal Original_PHONE2 As String) As Integer
			If (Original_ID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(0).Value = (CDbl(Original_ID.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
			End If
			If (Original_PARENTID.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CDbl(Original_PARENTID.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (Original_IMAGEINDEX.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CDbl(Original_IMAGEINDEX.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (Original_DEPARTMENT Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_DEPARTMENT))
			End If
			If (Original_BUDGET.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CDec(Original_BUDGET.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
			End If
			If (Original_LOCATION Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CStr(Original_LOCATION))
			End If
			If (Original_PHONE1 Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CStr(Original_PHONE1))
			End If
			If (Original_PHONE2 Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CStr(Original_PHONE2))
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal ID As System.Nullable(Of Double), ByVal PARENTID As System.Nullable(Of Double), ByVal IMAGEINDEX As System.Nullable(Of Double), ByVal DEPARTMENT As String, ByVal BUDGET As System.Nullable(Of Decimal), ByVal LOCATION As String, ByVal PHONE1 As String, ByVal PHONE2 As String) As Integer
			If (ID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CDbl(ID.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
			End If
			If (PARENTID.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(1).Value = (CDbl(PARENTID.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
			End If
			If (IMAGEINDEX.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = (CDbl(IMAGEINDEX.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (DEPARTMENT Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(DEPARTMENT))
			End If
			If (BUDGET.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = (CDec(BUDGET.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (LOCATION Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = (CStr(LOCATION))
			End If
			If (PHONE1 Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = (CStr(PHONE1))
			End If
			If (PHONE2 Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = (CStr(PHONE2))
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute(), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal ID As System.Nullable(Of Double), ByVal PARENTID As System.Nullable(Of Double), ByVal IMAGEINDEX As System.Nullable(Of Double), ByVal DEPARTMENT As String, ByVal BUDGET As System.Nullable(Of Decimal), ByVal LOCATION As String, ByVal PHONE1 As String, ByVal PHONE2 As String, ByVal Original_ID As System.Nullable(Of Double), ByVal Original_PARENTID As System.Nullable(Of Double), ByVal Original_IMAGEINDEX As System.Nullable(Of Double), ByVal Original_DEPARTMENT As String, ByVal Original_BUDGET As System.Nullable(Of Decimal), ByVal Original_LOCATION As String, ByVal Original_PHONE1 As String, ByVal Original_PHONE2 As String) As Integer
			If (ID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CDbl(ID.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
			End If
			If (PARENTID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CDbl(PARENTID.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
			End If
			If (IMAGEINDEX.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CDbl(IMAGEINDEX.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
			End If
			If (DEPARTMENT Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(DEPARTMENT))
			End If
			If (BUDGET.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CDec(BUDGET.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
			End If
			If (LOCATION Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CStr(LOCATION))
			End If
			If (PHONE1 Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CStr(PHONE1))
			End If
			If (PHONE2 Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CStr(PHONE2))
			End If
			If (Original_ID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CDbl(Original_ID.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
			End If
			If (Original_PARENTID.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CDbl(Original_PARENTID.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
			End If
			If (Original_IMAGEINDEX.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CDbl(Original_IMAGEINDEX.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
			End If
			If (Original_DEPARTMENT Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CStr(Original_DEPARTMENT))
			End If
			If (Original_BUDGET.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CDec(Original_BUDGET.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
			End If
			If (Original_LOCATION Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CStr(Original_LOCATION))
			End If
			If (Original_PHONE1 Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CStr(Original_PHONE1))
			End If
			If (Original_PHONE2 Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CStr(Original_PHONE2))
			End If
			Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open) <> System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591